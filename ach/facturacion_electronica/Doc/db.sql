EXECUTE PROCEDURE S_CREA_TABLA('SRI_DOCUMENTOS');
ALTER TABLE SRI_DOCUMENTOS ADD FECHA_EMISION DATE;
ALTER TABLE SRI_DOCUMENTOS ADD TIPO VARCHAR(3);
ALTER TABLE SRI_DOCUMENTOS ADD NOMBRE_TIPO VARCHAR(20);
ALTER TABLE SRI_DOCUMENTOS ADD IDX VARCHAR(16);
ALTER TABLE SRI_DOCUMENTOS ADD TABLA VARCHAR(60);
ALTER TABLE SRI_DOCUMENTOS ADD FECHA_APROBACION TIMESTAMP;
ALTER TABLE SRI_DOCUMENTOS ADD NOMBRES VARCHAR(200);
ALTER TABLE SRI_DOCUMENTOS ADD SRI_SECUENCIA VARCHAR(20);
ALTER TABLE SRI_DOCUMENTOS ADD SRI_AUTORIZACION VARCHAR(60);
ALTER TABLE SRI_DOCUMENTOS ADD ESTATUS VARCHAR(20) DEFAULT 'PENDIENTE';
ALTER TABLE SRI_DOCUMENTOS ADD INTENTO INTEGER DEFAULT 0;
ALTER TABLE SRI_DOCUMENTOS ADD COMENTARIOS VARCHAR(1000);


ALTER TABLE M_CONCEPTOS_RETEN ADD SRI_FORMULARIO_103 VARCHAR(20);
ALTER TABLE M_CONCEPTOS_RETEN ADD SRI_CODIGO_ANEXO VARCHAR(20);
ALTER TABLE M_CONCEPTOS_RETEN ADD COMENTARIOS VARCHAR(200);

---------------------------------------------------------------------------------------

ALTER TABLE D_CORREO ADD COMANDO VARCHAR(5000);
ALTER TABLE M_DOCUMENTOS ADD SRI_NUMERO INTEGER DEFAULT 0;
ALTER TABLE M_DOCUMENTOS ADD SRI_AUTORIZACION VARCHAR(60);
ALTER TABLE M_DOCUMENTOS ADD SRI_CORREO VARCHAR(10);
ALTER TABLE M_DOCUMENTOS ADD SRI_FECHAAUTORIZA VARCHAR(20);
ALTER TABLE M_DOCUMENTOS ADD SRI_SECUENCIA VARCHAR(20);

ALTER TABLE X_M_DOCUMENTOS ADD ID_M_PRODUCTOS VARCHAR(16);


ALTER TABLE M_CORRELATIVOS ADD SRI_CODIGO VARCHAR(10);
COMMIT;
/* TABLA 4 */
UPDATE M_CORRELATIVOS SET SRI_CODIGO='01',SRI_NUMERO=0 WHERE TIPO='FAC';

ALTER TABLE M_CLIENTES ADD SRI_CONTABILIDAD VARCHAR(2) DEFAULT 'SI';
/* SI/NO */
ALTER TABLE M_CLIENTES ADD SRI_TIPO VARCHAR(10);
/* TABLA 7 */
ALTER TABLE M_TIPO_PAGOS ADD SRI_FORMA VARCHAR(10);
/* TABLA 25 */
ALTER TABLE M_IMPUESTOS ADD SRI_CODIGO VARCHAR(10);
/* TABLA 17 */
ALTER TABLE M_IMPUESTOS ADD SRI_TARIFA VARCHAR(10);
/* TABLA 18 O 19 */

/* PARA COMPROBANTES DE RETENCIPONES */
ALTER TABLE D_CXCCXP ADD SRI_SECUENCIA VARCHAR(20);
ALTER TABLE D_CXCCXP ADD SRI_FECHA_RETENCION DATE;
ALTER TABLE M_PROVEEDORES  ADD SRI_CONTABILIDAD VARCHAR(2) DEFAULT 'SI';
ALTER TABLE M_PROVEEDORES ADD SRI_TIPO VARCHAR(10);
ALTER TABLE D_CXCCXP ADD SRI_FECHAAUTORIZA VARCHAR(20);
/* TABLA 7 */





COMMIT;


----------------------------------------------------------------------------

CREATE OR ALTER PROCEDURE SRI_SECUENCIA(
  TIPO VARCHAR(3) CHARACTER SET ISO8859_1)
RETURNS(
  SECUENCIA VARCHAR(9) CHARACTER SET ISO8859_1)
AS
DECLARE VARIABLE XNUMERO INTEGER;
BEGIN
    UPDATE M_CORRELATIVOS SET SRI_NUMERO =CAST(SRI_NUMERO AS INTEGER) + 1 WHERE TIPO=:TIPO;
    SELECT SRI_NUMERO FROM M_CORRELATIVOS WHERE TIPO=:TIPO INTO :XNUMERO;
    SECUENCIA = SUBSTRING('000000000' FROM 1 FOR 9-CHAR_LENGTH(:XNUMERO))|| :XNUMERO;
    SUSPEND;
END

----------------------------------------------------------------------------

CREATE OR ALTER TRIGGER M_DOCUMENTOS_SRI_SECUENCIA FOR M_DOCUMENTOS
ACTIVE BEFORE INSERT
POSITION 5
AS
BEGIN
  /* Trigger body */
    SELECT SECUENCIA FROM SRI_SECUENCIA(NEW.TIPO) INTO NEW.SRI_SECUENCIA;
END;


----------------------------------------------------------------------------

CREATE OR ALTER PROCEDURE SRI_AUTORIZA_FAC(
  DOCUMENTO VARCHAR(20) CHARACTER SET ISO8859_1,
  FECHA_DOCUMENTO DATE,
  TIPO VARCHAR(2))
RETURNS(
  AK VARCHAR(49) CHARACTER SET ISO8859_1)
AS
DECLARE VARIABLE X INTEGER;
DECLARE VARIABLE Y VARCHAR(20);
DECLARE VARIABLE I INTEGER;
DECLARE VARIABLE D INTEGER;
DECLARE VARIABLE PENT INTEGER;
DECLARE VARIABLE CH VARCHAR(1);
DECLARE VARIABLE DIG INTEGER;
DECLARE VARIABLE XVAL INTEGER;
DECLARE VARIABLE DIGA INTEGER;
DECLARE VARIABLE DIGC INTEGER;
DECLARE VARIABLE PDEC NUMERIC(18, 3);
DECLARE VARIABLE MOD11 NUMERIC(18, 3);
DECLARE VARIABLE SUMATORIA NUMERIC(18, 3);
DECLARE VARIABLE SEP VARCHAR(1);
DECLARE VARIABLE XTEMP VARCHAR(10);
BEGIN
  /* AK VOY ARMANDO LA CLAVE DE AUTORIZACION */
  AK = '';
  SEP ='';
  /* VOY ARMANDO LA CLAVE ACCESO CON DIA MES AMO 8 DIGITOS */
  SELECT EXTRACT(DAY FROM :FECHA_DOCUMENTO) FROM RDB$DATABASE INTO :Y;
  IF(CAST(Y AS INTEGER)<10) THEN Y = '0'||:Y;
  AK = AK ||Y;

  SELECT EXTRACT(MONTH FROM :FECHA_DOCUMENTO) FROM RDB$DATABASE INTO :Y;
  IF(CAST(Y AS INTEGER)<10) THEN Y = '0'||:Y;
  AK = AK ||Y;

  SELECT EXTRACT(YEAR FROM :FECHA_DOCUMENTO) FROM RDB$DATABASE INTO :Y;
  AK = AK ||Y;
  AK = AK ||:SEP;

  /* TIPO DE DOCUMENTO  SEGUN TABLA 4 = 2 DIGITOS */
  /* PARA ESTE CASO FACTURA OJO*/
  AK = AK ||:TIPO;
  AK = AK ||:SEP;

  /* RUC DE LA EMPRESA  = 13 DIGITOS */
  SELECT CODIGO1 FROM CONFIGURACION INTO :Y;
  AK = AK ||:Y;
  AK = AK ||:SEP;

  /* AMBIENTE DE TRABAJAO SEGUN TABLA 5 = 1 DIGITOS */
  /* PARA ESTE CASO PRUEBA OJO*/
  AK = AK ||'1';
  AK = AK ||:SEP;

  /* SERIE  001001 = 6 DIGITOS */
  /* PARA ESTE CASO PRUEBA OJO*/
  AK = AK ||'001001';
  AK = AK ||:SEP;

  /* NUMERO DE COMPROBANTE SECUENCIA  = 9 DIGITOS */
 -- AK = AK || SUBSTRING('000000000' FROM 1 FOR 9-CHAR_LENGTH(:DOCUMENTO)) ||:DOCUMENTO;
  AK = AK ||:DOCUMENTO;
  AK = AK ||:SEP;
  --SUSPEND;
  --EXIT;

  /* CODIGO NUMERICO  = 8 DIGITOS */
  AK = AK || '12345678';
  AK = AK ||:SEP;

  /* TIPO DE EMISION SEGUN TABLA 2 = 1 DIGITOS */
  /* PARA ESTE CASO NORMAL OJO*/
  AK = AK || '1';
  AK = AK ||:SEP;
  /*CALCULO DE DIGITO DE CONTROL SEGUN ALGORITMO MOD 11*/
  /* DEBERIA COMENZAR A ASIGAR DE DERECHA A IZQUIERDA PERO COMO SON 48 QUEDA PERFECTO ASI OJO*/
  I = 1;
  D = 7;
  SUMATORIA = 0;
  WHILE (I<49) DO
  BEGIN
 	DIG = SUBSTRING(:AK FROM :I FOR 1);
       DIGA = :D;
       I = I +1;
       D = D - 1;
       XVAL = :DIG*:DIGA;
       SUMATORIA = SUMATORIA + :XVAL;
       IF(:D<2) THEN D = 7;
  END

  MOD11 = 11;
  PENT = MOD(:SUMATORIA, MOD11);
  /* DIGITO DE VERIFICACION */
  DIGC = :MOD11 - :PENT;
  IF(DIGC=10)THEN DIGC=1;
  IF(DIGC=11)THEN DIGC=0;

  AK = AK ||DIGC;
  SUSPEND;

END
----------------------------------------------------------------------------

CREATE OR ALTER VIEW V_M_DOCUMENTOS_FACT_ELEC
AS
SELECT
M_DOCUMENTOS.ID AS ID,
M_DOCUMENTOS.ID_M_DOCUMENTOS AS ID_M_DOCUMENTOS,
M_DOCUMENTOS.TIPO AS TIPO,
/*INICIO infoTributaria*/
1 AS ambiente,
1 AS tipoEmision,
CONFIGURACION.RAZON AS razonSocial,
CONFIGURACION.NOMBRES AS nombreComercial,
CONFIGURACION.CODIGO1 AS ruc,
(SELECT AK FROM SRI_AUTORIZA_FAC(M_DOCUMENTOS.SRI_SECUENCIA, M_DOCUMENTOS.FECHA_DOCUMENTO)) AS claveAcceso,
M_CORRELATIVOS.SRI_CODIGO AS codDoc,
'001' AS estab,
'001' AS ptoEmi,
M_DOCUMENTOS.SRI_SECUENCIA AS secuencial,
CONFIGURACION.DIRECCION AS dirMatriz,
/*INICIO infoFactura*/
M_DOCUMENTOS.FECHA_DOCUMENTO AS fechaEmision,
M_CLIENTES.SRI_CONTABILIDAD AS obligadoContabilidad,
M_CLIENTES.SRI_TIPO AS tipoIdentificacionComprador,
M_CLIENTES.RAZON AS razonSocialComprador,
M_CLIENTES.CODIGO1 AS identificacionComprador,
M_CLIENTES.DIRECCION AS direccionComprador,
CAST(M_DOCUMENTOS.MONTO_BRUTO AS NUMERIC(15,2)) AS totalSinImpuestos,
CAST(M_DOCUMENTOS.MONTO_DESCUENTO AS NUMERIC(15,2)) AS totalDescuento,
/*INICIO totalConImpuestos*/
/*REVISAR TABLA 17-18*/
'2' AS codigo,
'2' AS codigoPorcentaje,
CAST(M_DOCUMENTOS.SUB_TOTAL AS NUMERIC(15,2)) AS baseImponible,
CAST(M_DOCUMENTOS.MONTO_IMPUESTO AS NUMERIC(15,2)) AS valor,
CAST(0 AS NUMERIC(15,2)) AS propina,
CAST(M_DOCUMENTOS.NETO AS NUMERIC(15,2))AS importeTotal,
'DOLAR' AS moneda,
M_CLIENTES.CORREO AS CORREO,
M_CLIENTES.TELEFONO1 AS TELEFONO1,
M_CORRELATIVOS.NOMBRES AS NOMBRE_TIPO,
M_DOCUMENTOS.SRI_AUTORIZACION AS SRI_AUTORIZACION,
IIF(M_DOCUMENTOS.SRI_AUTORIZACION IS NULL, 'NO','SI') AS AUTORIZADO
FROM M_DOCUMENTOS
LEFT JOIN CONFIGURACION ON M_DOCUMENTOS.ID_EMPRESA = CONFIGURACION.CODIGO
LEFT JOIN M_CAJAS ON (M_CAJAS.ID_M_CAJAS                  = M_DOCUMENTOS.ID_M_CAJAS)
LEFT JOIN M_CLIENTES ON (M_CLIENTES.ID_M_CLIENTES            = M_DOCUMENTOS.ID_M_CLIENTES)
LEFT JOIN M_CORRELATIVOS ON M_CORRELATIVOS.TIPO = M_DOCUMENTOS.TIPO
;

----------------------------------------------------------------------------


CREATE OR ALTER VIEW V_D_DOCUMENTOS_FACT_ELEC
AS
SELECT
D_DOCUMENTOS.ID AS ID,
D_DOCUMENTOS.ID_D_DOCUMENTOS AS ID_D_DOCUMENTOS,
D_DOCUMENTOS.ID_M_DOCUMENTOS AS ID_M_DOCUMENTOS,
D_DOCUMENTOS.TIPO AS TIPO,
D_DOCUMENTOS.ID_M_PRODUCTOS AS codigoPrincipal,
D_DOCUMENTOS.ID_M_PRODUCTOS AS codigoAuxiliar,
D_DOCUMENTOS.DESCRIPCION AS descripcion,
CAST(D_DOCUMENTOS.CANTIDAD AS NUMERIC(15,2)) AS cantidad,
CAST(D_DOCUMENTOS.PRECIO AS NUMERIC(15,2)) AS precioUnitario,
CAST(COALESCE(D_DOCUMENTOS.MONTO_DESCUENTO,0) AS NUMERIC(15,2)) AS descuento,
CAST(COALESCE(D_DOCUMENTOS.MONTO_BRUTO,0) AS NUMERIC(15,2)) AS precioTotalSinImpuesto,
M_IMPUESTOS.SRI_CODIGO AS codigo,
M_IMPUESTOS.SRI_TARIFA AS codigoPorcentaje,
CAST(M_IMPUESTOS.MONTO_IMPUESTO AS NUMERIC(15,2)) AS tarifa,
CAST(M_DOCUMENTOS.MONTO_BRUTO AS NUMERIC(15,2)) AS baseImponible,
CAST(M_DOCUMENTOS.MONTO_IMPUESTO AS NUMERIC(15,2)) AS valor
FROM D_DOCUMENTOS
LEFT JOIN M_DOCUMENTOS ON M_DOCUMENTOS.ID_M_DOCUMENTOS = D_DOCUMENTOS.ID_M_DOCUMENTOS
LEFT JOIN M_IMPUESTOS ON M_IMPUESTOS.ID_M_IMPUESTOS = D_DOCUMENTOS.ID_M_IMPUESTOS
;
----------------------------------------------------------------------------

CREATE OR ALTER VIEW V_D_PAGOS_FACT_ELEC
AS
SELECT
D_PAGOS.ID_D_PAGOS AS ID_D_PAGOS,
D_PAGOS.ID AS ID,
D_PAGOS.IDX AS IDX,
D_PAGOS.TABLA AS TABLA,
D_PAGOS.FECHA_PAGO AS FECHA_PAGO,
D_PAGOS.ID_M_TIPO_PAGOS AS ID_M_TIPO_PAGOS,
CAST(D_PAGOS.CREDITOS AS NUMERIC(15,2)) AS total,
M_TIPO_PAGOS.SRI_FORMA AS formaPago


FROM D_PAGOS
LEFT JOIN M_TIPO_PAGOS         ON (M_TIPO_PAGOS.ID_M_TIPO_PAGOS      = D_PAGOS.ID_M_TIPO_PAGOS)
;


/*COMPRAS ELECTRONICAS */
ALTER TABLE X_M_DOCUMENTOS ALTER COLUMN FECHA_DOCUMENTO TYPE DATE;
ALTER TABLE X_M_DOCUMENTOS ALTER COLUMN FECHA_RECEPCION TYPE DATE;

ALTER TABLE X_DOCUMENTOS DROP CONSTRAINT FK_X_DOCUMENTOS_IMPUESTOS;

ALTER TABLE X_DOCUMENTOS ADD SRI_CODIGOPRINCIPAL VARCHAR(60);
ALTER TABLE X_DOCUMENTOS ADD SRI_precioSinSubsidio numeric(15,3);
ALTER TABLE X_DOCUMENTOS ADD SRI_precioTotalSinImpuesto numeric(15,3);
ALTER TABLE X_DOCUMENTOS ADD SRI_codigo VARCHAR(60);
ALTER TABLE X_DOCUMENTOS ADD SRI_codigoPorcentaje VARCHAR(60);
ALTER TABLE X_DOCUMENTOS ADD SRI_tarifa numeric(15,3);
ALTER TABLE X_DOCUMENTOS ADD SRI_baseImponible numeric(15,3);
ALTER TABLE X_DOCUMENTOS ADD SRI_valor numeric(15,3);
ALTER TABLE X_DOCUMENTOS ADD ID_M_PROVEEDORES VARCHAR(16);
ALTER TABLE X_DOCUMENTOS ADD ID_M_PROVEEDORES_PRODUCTO VARCHAR(16);


EXECUTE PROCEDURE S_CREA_TABLA('M_PROVEEDORES_PRODUCTO');
ALTER TABLE M_PROVEEDORES_PRODUCTO ADD ID_M_PROVEEDORES VARCHAR(16);
ALTER TABLE M_PROVEEDORES_PRODUCTO ADD ID_M_PRODUCTOS VARCHAR(16);
ALTER TABLE M_PROVEEDORES_PRODUCTO ADD ID_I_PROD_ALMA VARCHAR(16);
ALTER TABLE M_PROVEEDORES_PRODUCTO ADD ID_D_I_PROD_ALMA VARCHAR(16);
ALTER TABLE M_PROVEEDORES_PRODUCTO ADD ID_D_PRODUCTOS VARCHAR(16);
ALTER TABLE M_PROVEEDORES_PRODUCTO ADD CODIGOPRINCIPAL VARCHAR(60);
ALTER TABLE M_PROVEEDORES_PRODUCTO ADD DESCRIPCION VARCHAR(200);
ALTER TABLE M_PROVEEDORES_PRODUCTO ADD ID_M_ALMACENES VARCHAR(16);
ALTER TABLE M_PROVEEDORES_PRODUCTO ADD TIPO VARCHAR(10);
ALTER TABLE M_PROVEEDORES_PRODUCTO ADD DESCRIPCIONS24 VARCHAR(200);

CREATE INDEX IDX_M_PROVEEDORES_PRODUCTO1 ON M_PROVEEDORES_PRODUCTO(ID_M_PROVEEDORES,CODIGOPRINCIPAL);
CREATE INDEX IDX_X_DOCUMENTOS12 ON X_DOCUMENTOS(ID_M_PROVEEDORES,SRI_CODIGOPRINCIPAL);

CREATE PROCEDURE ASOCIAR_PRODUCTO_PROVEEDOR(
  ID_X_M_DOCUMENTOS VARCHAR(25) CHARACTER SET ISO8859_1,
  ID_M_PRODUCTOS VARCHAR(25) CHARACTER SET ISO8859_1)
RETURNS(
  RESPUESTA VARCHAR(6) CHARACTER SET ISO8859_1)
AS
DECLARE VARIABLE ID_M_PROVEEDORES_PRODUCTO VARCHAR(16);
DECLARE VARIABLE P INTEGER;
BEGIN
  FOR
    SELECT ID_M_PROVEEDORES_PRODUCTO FROM X_DOCUMENTOS WHERE ID_M_PRODUCTOS IS NULL INTO :ID_M_PROVEEDORES_PRODUCTO
  DO
  BEGIN
       UPDATE M_PROVEEDORES_PRODUCTO SET ID_M_PRODUCTOS=:ID_M_PRODUCTOS
       WHERE ID_M_PROVEEDORES_PRODUCTO=:ID_M_PROVEEDORES_PRODUCTO;
  END
  RESPUESTA ='OK';
  SUSPEND;

END

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
CREATE TRIGGER T_X_DOCUMENTOS_MONTOS FOR X_DOCUMENTOS
ACTIVE BEFORE INSERT OR UPDATE
POSITION 11
AS
DECLARE VARIABLE XCANTIDAD NUMERIC(18, 3);
DECLARE VARIABLE XTIPO_PADRE VARCHAR(16);
DECLARE VARIABLE XACCION VARCHAR(20);
BEGIN

       -- EXCEPTION e_debug new.MONTO_DESCUENTO;

         IF(NEW.TIPO='DEV') THEN
         BEGIN
              XCANTIDAD = NEW.CANTIDAD;
         END
         ELSE
         BEGIN
              XCANTIDAD = NEW.CANTIDAD;
         END
         IF( NEW.ID_PADRE IS NULL)  THEN
         BEGIN
              NEW.XPRECIO = NEW.PRECIO;
         END
         ELSE
         BEGIN
              SELECT TIPO_PRODUCTO FROM X_DOCUMENTOS WHERE ID_X_M_DOCUMENTOS = NEW.ID_X_M_DOCUMENTOS AND ID_D_DOCUMENTOS = NEW.ID_PADRE
			  ROWS 1 TO 1
              INTO :XTIPO_PADRE;
         END

         IF(NEW.TIPO_PRODUCTO IN ('C','F') AND (NEW.ID_D_DOCUMENTOS = NEW.ID_PADRE AND NEW.ID_PADRE IS NOT NULL) ) THEN
         BEGIN
              NEW.XPRECIO = NEW.PRECIO;
         END
         IF(NEW.TIPO_PRODUCTO IN ('C','F') AND (NEW.ID_D_DOCUMENTOS IS DISTINCT FROM NEW.ID_PADRE AND NEW.ID_PADRE IS NOT NULL) AND XTIPO_PADRE IN ('C','F')) THEN
         BEGIN
              NEW.XPRECIO = 0;
         END
         IF(NEW.TIPO_PRODUCTO IN ('C','F') AND (NEW.ID_D_DOCUMENTOS IS DISTINCT FROM NEW.ID_PADRE AND NEW.ID_PADRE IS NOT NULL) AND XTIPO_PADRE IN ('D','E')) THEN
         BEGIN
              NEW.XPRECIO = NEW.PRECIO;
         END

         IF(NEW.TIPO_PRODUCTO IN ('E','D') AND NEW.CLASE_PRODUCTO IS DISTINCT FROM NEW.TIPO_PRODUCTO) THEN
         BEGIN
              NEW.XPRECIO = NEW.PRECIO;
         END

         IF(NEW.TIPO_PRODUCTO IN ('E','D') AND NEW.CLASE_PRODUCTO = NEW.TIPO_PRODUCTO) THEN
         BEGIN
              NEW.XPRECIO = 0;
              NEW.PRECIO =0;
              NEW.MONTO_BRUTO =0;
              NEW.MONTO_DESCUENTO = 0;
              NEW.MONTO_IMPUESTO=0;
              NEW.NETO=0;
              NEW.XNETO=0;
         END

         IF(NEW.TIPO_PRODUCTO IN ('P','S','Q','H') AND NEW.CLASE_PRODUCTO = NEW.TIPO_PRODUCTO) THEN
         BEGIN
              NEW.XPRECIO = NEW.PRECIO;
         END

         IF(NEW.TIPO IN('COM','ODC','REV','DEC')) THEN
         BEGIN
         -- EXCEPTION e_debug new.MONTO_DESCUENTO;
             IF(NEW.XMONTO_BRUTO1 > 0 AND COALESCE(NEW.PRECIO,0) = COALESCE(OLD.PRECIO,0) ) THEN
             BEGIN
                  NEW.MONTO_BRUTO       = COALESCE(NEW.XMONTO_BRUTO1,0);
             END
             ELSE
             BEGIN
                  NEW.MONTO_BRUTO = CAST(NEW.CANTIDAD*NEW.PRECIO AS NUMERIC(15,3));
                  NEW.XMONTO_BRUTO1 = COALESCE(NEW.MONTO_BRUTO,0);
             END
              --EXCEPTION e_debug new.MONTO_DESCUENTO;
             --NEW.MONTO_DESCUENTO   = (CAST((COALESCE(NEW.XMONTO_BRUTO1,0) + COALESCE(NEW.XMONTO_DESCUENTO1,0)) * CAST((NEW.DESCUENTO/100) AS NUMERIC(15,3)) AS NUMERIC(15,3))) ;

              --xx 0.000000 xx 11.464000 xx 0.000000.
             IF((NEW.DESCUENTO > 0 AND NEW.XMONTO_BRUTO1>0) OR (NEW.XMONTO_DESCUENTO1 > 0) OR (NEW.TIPO_DESCUENTO IS NOT NULL)) THEN
             BEGIN
                  IF(NEW.TIPO_DESCUENTO IS NULL) THEN
                  BEGIN
                       --NEW.MONTO_DESCUENTO   = ((CAST((COALESCE(NEW.XMONTO_BRUTO1,0) ) * CAST((NEW.DESCUENTO/100) AS NUMERIC(15,3)) AS NUMERIC(15,3))))  ;
                       NEW.MONTO_DESCUENTO   = (COALESCE(NEW.XMONTO_BRUTO1,0) * COALESCE(NEW.DESCUENTO,0))/100;
                  END
                  ELSE
                  BEGIN
                       SELECT TOTAL_DESCUENTO,TOTAL_DESCUENTO1,TOTAL_DESCUENTO2,TOTAL_DESCUENTO3,TOTAL_DESCUENTO4 FROM S_CALCULAR_DESCUENTO(NEW.TIPO_DESCUENTO,NEW.DESCUENTO,NEW.DESCUENTO1,NEW.DESCUENTO2,NEW.DESCUENTO3,NEW.DESCUENTO4,NEW.MONTO_BRUTO)
                       INTO NEW.MONTO_DESCUENTO,NEW.MONTO_DESCUENTO1,NEW.MONTO_DESCUENTO2,NEW.MONTO_DESCUENTO3,NEW.MONTO_DESCUENTO4;
                  END
             END
             ELSE
             BEGIN
                  --NEW.MONTO_DESCUENTO =0;
             END
            -- EXCEPTION e_debug NEW.MONTO_BRUTO- NEW.MONTO_DESCUENTO;
             NEW.MONTO_IMPUESTO    = CAST((NEW.MONTO_BRUTO - COALESCE(NEW.MONTO_DESCUENTO,0) - COALESCE(NEW.XMONTO_DESCUENTO1,0)) * (COALESCE(NEW.IMPUESTO,0)/100) AS NUMERIC(15,3));
            --EXCEPTION e_debug (CAST((NEW.MONTO_BRUTO - COALESCE(NEW.MONTO_DESCUENTO,0) - COALESCE(NEW.XMONTO_DESCUENTO1,0)) * (COALESCE(NEW.IMPUESTO,0)/100) AS NUMERIC(15,3))) ||'->XXX'|| NEW.MONTO_IMPUESTO  ;
   

             NEW.NETO              = NEW.MONTO_BRUTO - COALESCE(NEW.MONTO_DESCUENTO,0) - COALESCE(NEW.XMONTO_DESCUENTO1,0) + COALESCE(NEW.MONTO_IMPUESTO,0);
             NEW.XNETO             = NEW.MONTO_BRUTO - COALESCE(NEW.MONTO_DESCUENTO,0);
             NEW.XMONTO_IMPUESTO1  = CAST(NEW.MONTO_IMPUESTO AS NUMERIC(15,3));
            -- EXCEPTION e_debug (NEW.MONTO_BRUTO- NEW.MONTO_DESCUENTO) ||'->'|| NEW.NETO  ;
            -- INSERT INTO X_DEBUG(ACCION,DATA) VALUES(IIF(inserting, 'INSERT', 'UPDATE'), NEW.MONTO_BRUTO||'->'||NEW.MONTO_DESCUENTO||'->'||NEW.MONTO_IMPUESTO||'->'||NEW.NETO||'->'||NEW.XMONTO_DESCUENTO1||':::::'||(NEW.MONTO_BRUTO - NEW.MONTO_DESCUENTO - NEW.XMONTO_DESCUENTO1));
           -- exception e_Debug NEW.MONTO_BRUTO||'->'||NEW.MONTO_DESCUENTO||'->'||NEW.MONTO_IMPUESTO||'->'||NEW.NETO||'->'||NEW.XMONTO_DESCUENTO1||':::::'||(NEW.MONTO_BRUTO - NEW.MONTO_DESCUENTO - NEW.XMONTO_DESCUENTO1);

         END
         ELSE
         BEGIN
             NEW.MONTO_BRUTO       = CAST(COALESCE(:XCANTIDAD,0)*NEW.XPRECIO AS NUMERIC(15,3));
             IF((COALESCE(NEW.MONTO_DESCUENTO,0) = COALESCE(OLD.MONTO_DESCUENTO,0) AND NEW.DESCUENTO > 0 ) OR NEW.DESCUENTO IS DISTINCT FROM COALESCE(OLD.DESCUENTO,0) OR (NEW.TIPO_DESCUENTO IS NOT NULL AND NEW.TIPO_DESCUENTO IS DISTINCT FROM '')) THEN
             BEGIN
                  IF(NEW.TIPO_DESCUENTO IS NULL) THEN
                  BEGIN
                       --NEW.MONTO_DESCUENTO   = CAST(NEW.MONTO_BRUTO*CAST((NEW.DESCUENTO/100) AS NUMERIC(15,3)) AS NUMERIC(15,3));
                       NEW.MONTO_DESCUENTO   = (COALESCE(NEW.MONTO_BRUTO,0) * COALESCE(NEW.DESCUENTO,0))/100;
                  END
                  ELSE
                  BEGIN
                       SELECT TOTAL_DESCUENTO,TOTAL_DESCUENTO1,TOTAL_DESCUENTO2,TOTAL_DESCUENTO3,TOTAL_DESCUENTO4 FROM S_CALCULAR_DESCUENTO(NEW.TIPO_DESCUENTO,NEW.DESCUENTO,NEW.DESCUENTO1,NEW.DESCUENTO2,NEW.DESCUENTO3,NEW.DESCUENTO4,NEW.MONTO_BRUTO)
                       INTO NEW.MONTO_DESCUENTO,NEW.MONTO_DESCUENTO1,NEW.MONTO_DESCUENTO2,NEW.MONTO_DESCUENTO3,NEW.MONTO_DESCUENTO4;

                  END

             END

             IF(NEW.TIPO='DEV' AND NEW.XMONTO_DESCUENTO1 > 0  AND NEW.DEVUELTOS > 0) THEN
             BEGIN
                  IF(NEW.CANTIDAD > 0) THEN
                  BEGIN
                       NEW.MONTO_DESCUENTO = (NEW.XMONTO_DESCUENTO1/NEW.DEVUELTOS) * NEW.CANTIDAD;
                  END
                  ELSE
                  BEGIN
                       NEW.MONTO_DESCUENTO = 0;
                  END
             END
             NEW.MONTO_IMPUESTO    = CAST((NEW.MONTO_BRUTO - NEW.MONTO_DESCUENTO) * (NEW.IMPUESTO/100) AS NUMERIC(15,3));
             NEW.NETO              = NEW.MONTO_BRUTO - COALESCE(NEW.MONTO_DESCUENTO,0) + COALESCE(NEW.MONTO_IMPUESTO,0);
             NEW.XNETO             = NEW.MONTO_BRUTO - COALESCE(NEW.MONTO_DESCUENTO,0);

             IF(NEW.MONTO_BRUTO >0 AND NEW.DESCUENTO = OLD.DESCUENTO AND NEW.TIPO_DESCUENTO IS NULL) THEN
             BEGIN
                       NEW.DESCUENTO = CAST((NEW.MONTO_DESCUENTO/NEW.MONTO_BRUTO)*100 AS NUMERIC(15,3));
             END

         END
END

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

CREATE OR ALTER  TRIGGER T_D_CXCCXP_RETENCIONES FOR D_CXCCXP
ACTIVE BEFORE INSERT
POSITION 1
AS
DECLARE VARIABLE RAZON VARCHAR(200);
DECLARE VARIABLE DIRECCION VARCHAR(300);
DECLARE VARIABLE CODIGO1 VARCHAR(20);
DECLARE VARIABLE ID_M_DOCUMENTOS VARCHAR(16);
BEGIN

IF(NEW.TIPO='REM')THEN
BEGIN
     SELECT SRI_SECUENCIA
     FROM D_CXCCXP WHERE ID_D_CXCCXP = NEW.ID_PADRE
     INTO NEW.SRI_SECUENCIA;

     IF(NEW.SRI_SECUENCIA IS NULL)THEN
     BEGIN
          SELECT SECUENCIA FROM SRI_SECUENCIA(NEW.TIPO) INTO NEW.SRI_SECUENCIA;
          UPDATE D_CXCCXP
                 SET SRI_SECUENCIA = NEW.SRI_SECUENCIA,
                 SRI_FECHA_RETENCION = CAST('NOW' AS DATE)
          WHERE ID_D_CXCCXP = NEW.ID_PADRE;

          INSERT INTO SRI_DOCUMENTOS(FECHA_EMISION, TIPO,NOMBRE_TIPO,IDX,TABLA,NOMBRES,SRI_SECUENCIA)
          VALUES(CAST('NOW' AS DATE), 'REM', 'RETENCION', NEW.ID_PADRE,'D_CXCCXP',NEW.NOMBRES,NEW.SRI_SECUENCIA);

     END
     NEW.REFERENCIA =NEW.SRI_SECUENCIA;
END
END
******************************************************************************************************************************

CREATE OR ALTER VIEW V_D_RETENCIONES_MULTIPLES_ELECT
AS
SELECT
D_CXCCXP.ID AS ID,
D_CXCCXP.ID_D_CXCCXP AS ID_D_CXCCXP,
D_CXCCXP.ID_PADRE AS ID_PADRE,
D_CXCCXP.IDX||','||D_CXCCXP.TABLA AS IDX,
/*INICIO infoTributaria*/
1 AS ambiente,
1 AS tipoEmision,
CONFIGURACION.RAZON AS razonSocial,
CONFIGURACION.NOMBRES AS nombreComercial,
CONFIGURACION.CODIGO1 AS ruc,
(SELECT AK FROM SRI_AUTORIZA_FAC(PADRE.SRI_SECUENCIA, PADRE.SRI_FECHA_RETENCION)) AS claveAcceso,
M_CORRELATIVOS.SRI_CODIGO AS codDoc,
'001' AS estab,
'001' AS ptoEmi,
D_CXCCXP.SRI_SECUENCIA AS secuencial,
/* INICIO infoCompRetencion*/
PADRE.SRI_FECHA_RETENCION AS fechaEmision,
M_PROVEEDORES.DIRECCION AS dirEstablecimiento,
M_PROVEEDORES.SRI_CONTABILIDAD AS obligadoContabilidad,
/*tipoIdentificacionSujetoRetenido CORTADO POR TAMANO */
M_PROVEEDORES.SRI_TIPO AS tipoIdSujetoRetenido,
M_PROVEEDORES.RAZON AS razonSocialSujetoRetenido,
M_PROVEEDORES.CODIGO1 AS identificacionSujetoRetenido,
EXTRACT(MONTH FROM PADRE.SRI_FECHA_RETENCION) ||'/'||  EXTRACT(YEAR FROM PADRE.SRI_FECHA_RETENCION) AS periodoFiscal,
/* INICIO impuestos */
M_CONCEPTOS_RETEN.TIPO AS codigo,
M_CONCEPTOS_RETEN.CAMPO1 AS codigoRetencion,
D_CXCCXP.SUB_TOTAL AS baseImponible,
D_CXCCXP.IMPUESTO AS porcentajeRetener,
D_CXCCXP.MONTO_BRUTO AS  valorRetenido,
/*TIPO DE DOCUMENTO AL QUE SE LE RETIENE UNA FCATURA DE COMPERA*/
'01' AS codDocSustento,
M_DOCUMENTOS.ID_M_DOC_FINAL AS numDocSustento,
M_DOCUMENTOS.FECHA_DOCUMENTO AS fechaEmisionDocSustento

FROM D_CXCCXP
LEFT JOIN D_CXCCXP AS PADRE    ON (PADRE.ID_PADRE                          = D_CXCCXP.ID_PADRE AND PADRE.TIPO='COM')
LEFT JOIN M_DOCUMENTOS         ON (M_DOCUMENTOS.ID_M_DOCUMENTOS              = PADRE.DOCUMENTO)
LEFT JOIN M_PROVEEDORES        ON (M_PROVEEDORES.ID_M_PROVEEDORES            = M_DOCUMENTOS.ID_M_PROVEEDORES)
left join m_correlativos       on (d_cxccxp.tipo                             = m_correlativos.tipo)
LEFT JOIN M_CONCEPTOS_RETEN    ON (M_CONCEPTOS_RETEN.ID_M_CONCEPTOS_RETEN    = D_CXCCXP.CAMPO1)
LEFT JOIN CONFIGURACION ON M_DOCUMENTOS.ID_EMPRESA = CONFIGURACION.CODIGO

WHERE D_CXCCXP.TIPO='REM' AND D_CXCCXP.CLASE='P' AND D_CXCCXP.ID_PADRE IS DISTINCT FROM D_CXCCXP.ID_D_CXCCXP --AND D_CXCCXP.DOCUMENTO IS NULL AND D_CXCCXP.DOCUMENTO=''
;

************************************************************************************************
CREATE TRIGGER M_DOCUMENTOS_SRI_DOC FOR M_DOCUMENTOS
ACTIVE AFTER INSERT
POSITION 3
AS
BEGIN
  /* Trigger body */
  IF(NEW.TIPO IN('FAC'))THEN
  BEGIN
       INSERT INTO SRI_DOCUMENTOS(FECHA_EMISION,TIPO,NOMBRE_TIPO,IDX,TABLA,NOMBRES,SRI_SECUENCIA)
       VALUES(NEW.FECHA_DOCUMENTO,'FAC', 'FACTURA', NEW.ID_M_DOCUMENTOS,'M_DOCUMENTOS',NEW.NOMBRES,NEW.SRI_SECUENCIA);
  END
END
***************************************************************************************


CREATE OR ALTER VIEW V_SRI_DOCUIMENTOS
AS
SELECT
      SRI_DOCUMENTOS.ID AS ID,
      SRI_DOCUMENTOS.ID_SRI_DOCUMENTOS AS ID_SRI_DOCUMENTOS,
      SRI_DOCUMENTOS.FECHA_EMISION AS FECHA_EMISION,
      SRI_DOCUMENTOS.FECHA_APROBACION AS FECHA_APROBACION,
      SRI_DOCUMENTOS.ESTATUS AS ESTATUS,
      SRI_DOCUMENTOS.TIPO AS TIPO,
      SRI_DOCUMENTOS.NOMBRE_TIPO AS NOMBRE_TIPO,
      SRI_DOCUMENTOS.NOMBRES AS NOMBRES,
      SRI_DOCUMENTOS.COMENTARIOS AS COMENTARIOS,
      SRI_DOCUMENTOS.INTENTO AS INTENTO,
      SRI_DOCUMENTOS.IDX AS IDX,
      SRI_DOCUMENTOS.TABLA AS TABLA,
      SRI_DOCUMENTOS.SRI_SECUENCIA AS SRI_SECUENCIA,
      CASE
          WHEN SRI_DOCUMENTOS.TABLA ='M_DOCUMENTOS' THEN (SELECT NETO FROM M_DOCUMENTOS WHERE ID_M_DOCUMENTOS = SRI_DOCUMENTOS.IDX)
          WHEN SRI_DOCUMENTOS.TIPO ='REM' THEN (SELECT SUM(MONTO_BRUTO) FROM D_CXCCXP WHERE ID_PADRE = SRI_DOCUMENTOS.IDX AND TIPO='REM')
      END AS MONTO
FROM SRI_DOCUMENTOS

